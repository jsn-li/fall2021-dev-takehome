{"version":3,"sources":["components/Tag.tsx","components/TodoItemForm.tsx","components/TodoList.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["Tag","value","colorScheme","isRemovable","onClick","Function","prototype","tagBody","size","TodoItemForm","onSubmit","useState","title","setTitle","tagInputValue","setTagInputValue","dueDate","setDueDate","Set","tags","setTags","w","mb","variant","onChange","e","target","tag","trim","length","has","alert","updatedTags","add","addTag","tagComponents","forEach","push","delete","removeTag","mt","justify","renderTags","id","uuidv4","TodoList","COMPLETED_COLOR","todoItems","setTodoItems","sortByDate","setSortByDate","sortByCompleted","setSortByCompleted","itemCompletions","setItemCompletions","filterTags","setFilterTags","compareCompletion","a","b","isAComplete","compareDates","getTime","getSortedTodoItems","sortedTodoItems","sort","completionComparisonResult","compareCompletionAndDates","todoItem","isComplete","undefined","updatedFilterTags","toggleFilterTag","spacing","p","border","borderColor","borderRadius","minW","maxW","isChecked","filter","shouldRender","map","color","m","toDateString","App","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5a0d33c5.chunk.js","sourcesContent":["import { Button } from \"@chakra-ui/react\";\n\ninterface PropTypes {\n  value: string;\n  colorScheme?: string;\n  isRemovable: boolean;\n  onClick?: () => void;\n}\n\nexport default function Tag({\n  value,\n  colorScheme = \"teal\",\n  isRemovable,\n  onClick = () => Function.prototype(),\n}: PropTypes) {\n  // if the tag is removable, render it with an X (times symbol) in front of the value\n  const tagBody = isRemovable ? <>&times; {value}</> : <>{value}</>;\n\n  return (\n    <Button colorScheme={colorScheme} size=\"xs\" onClick={() => onClick()}>\n      {tagBody}\n    </Button>\n  );\n}\n","import React, { useState } from \"react\";\nimport DatePicker from \"react-date-picker\";\nimport \"./TodoItemForm.css\";\nimport { TodoItem } from \"./TodoList\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport {\n  Box,\n  Button,\n  Center,\n  HStack,\n  Input,\n  Text,\n  Wrap,\n  WrapItem,\n} from \"@chakra-ui/react\";\nimport Tag from \"./Tag\";\n\ninterface PropTypes {\n  onSubmit: (todoItem: TodoItem) => void;\n}\n\nexport default function TodoItemForm({ onSubmit }: PropTypes) {\n  const [title, setTitle] = useState(\"\");\n  const [tagInputValue, setTagInputValue] = useState(\"\");\n  const [dueDate, setDueDate] = useState<Date | null>(null);\n  const [tags, setTags] = useState<Set<string>>(new Set<string>());\n\n  const addTag = (tag: string) => {\n    if (tag.trim().length === 0) {\n      alert(\"Tag cannot be empty!\");\n      return;\n    } else if (tags.has(tag)) {\n      alert(\"Tag already exists!\");\n      return;\n    }\n\n    const updatedTags = new Set<string>(tags);\n    updatedTags.add(tag);\n    setTags(updatedTags);\n    setTagInputValue(\"\");\n  };\n\n  const removeTag = (tag: string) => {\n    const updatedTags = new Set<string>(tags);\n    updatedTags.delete(tag);\n    setTags(updatedTags);\n  };\n\n  const renderTags = () => {\n    const tagComponents: JSX.Element[] = [];\n\n    tags.forEach((tag: string) => {\n      tagComponents.push(\n        <WrapItem>\n          <Tag\n            key={tag}\n            value={tag}\n            isRemovable={true}\n            onClick={() => removeTag(tag)}\n          />\n        </WrapItem>\n      );\n    });\n\n    return (\n      <Wrap mt={2.5} justify=\"center\">\n        {tagComponents}\n      </Wrap>\n    );\n  };\n\n  const handleSubmit = () => {\n    if (title.trim().length === 0 || dueDate === null) {\n      alert(\"Please ensure title and due date fields are populated.\");\n      return;\n    }\n\n    onSubmit({ id: uuidv4(), title: title, dueDate: dueDate, tags: tags });\n\n    setTitle(\"\");\n    setTagInputValue(\"\");\n    setDueDate(null);\n    setTags(new Set<string>());\n  };\n\n  return (\n    <Box w=\"100%\">\n      <Box mb={5}>\n        <Text mb={2.5}>Title:</Text>\n\n        <Input\n          variant=\"outline\"\n          value={title}\n          onChange={(e) => setTitle(e.target.value)}\n        />\n      </Box>\n\n      <Box mb={5}>\n        <Text mb={2.5}>Tags:</Text>\n\n        <HStack>\n          <Input\n            value={tagInputValue}\n            onChange={(e) => setTagInputValue(e.target.value)}\n          />\n          <Button onClick={() => addTag(tagInputValue)}>Create Tag</Button>\n        </HStack>\n\n        <Center>{renderTags()}</Center>\n      </Box>\n\n      <Box mb={5}>\n        <Text mb={2.5}>Due Date:</Text>\n\n        <DatePicker value={dueDate} onChange={setDueDate} />\n      </Box>\n\n      <Button w=\"100%\" colorScheme=\"blue\" onClick={handleSubmit}>\n        Submit\n      </Button>\n    </Box>\n  );\n}\n","import {\n  Box,\n  Checkbox,\n  HStack,\n  Text,\n  VStack,\n  Wrap,\n  WrapItem,\n} from \"@chakra-ui/react\";\nimport React, { useState } from \"react\";\nimport Tag from \"./Tag\";\nimport TodoItemForm from \"./TodoItemForm\";\n\nexport type TodoItem = {\n  id: string;\n  title: string;\n  dueDate: Date;\n  tags: Set<string>;\n};\n\nexport default function TodoList() {\n  const COMPLETED_COLOR = \"gray\";\n\n  const [todoItems, setTodoItems] = useState<TodoItem[]>([]);\n  const [sortByDate, setSortByDate] = useState(false);\n  const [sortByCompleted, setSortByCompleted] = useState(false);\n  const [itemCompletions, setItemCompletions] = useState<{\n    [key: string]: boolean;\n  }>({});\n  const [filterTags, setFilterTags] = useState<Set<string>>(new Set<string>());\n\n  const addTodoItem = (todoItem: TodoItem) => {\n    setTodoItems([...todoItems, todoItem]);\n  };\n\n  //\n  // SORTING LOGIC\n  //\n  const compareCompletion = (a: TodoItem, b: TodoItem) => {\n    const isAComplete = itemCompletions[a.id];\n    const isBComplete = itemCompletions[b.id];\n\n    if (isAComplete === isBComplete) {\n      return 0;\n    } else if (isAComplete === true) {\n      // we want completed items at the bottom\n      return 1;\n    }\n\n    return -1;\n  };\n\n  const compareCompletionAndDates = (a: TodoItem, b: TodoItem) => {\n    const completionComparisonResult = compareCompletion(a, b);\n\n    if (completionComparisonResult === 0) {\n      return compareDates(a, b);\n    }\n\n    return completionComparisonResult;\n  };\n\n  const compareDates = (a: TodoItem, b: TodoItem) => {\n    return a.dueDate.getTime() - b.dueDate.getTime();\n  };\n\n  const getSortedTodoItems = () => {\n    const sortedTodoItems = [...todoItems];\n\n    // TODO: why is this sorting not stable???\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\n    if (sortByDate && sortByCompleted) {\n      sortedTodoItems.sort((a, b) => compareCompletionAndDates(a, b));\n    } else if (sortByDate) {\n      sortedTodoItems.sort((a, b) => compareDates(a, b));\n    } else if (sortByCompleted) {\n      sortedTodoItems.sort((a, b) => compareCompletion(a, b));\n    }\n\n    return sortedTodoItems;\n  };\n\n  //\n  // RENDERING\n  //\n  const toggleFilterTag = (tag: string) => {\n    const updatedFilterTags = new Set<string>(filterTags);\n\n    if (updatedFilterTags.has(tag)) {\n      updatedFilterTags.delete(tag);\n    } else {\n      updatedFilterTags.add(tag);\n    }\n\n    setFilterTags(updatedFilterTags);\n  };\n\n  const renderTags = (todoItem: TodoItem, isComplete: boolean) => {\n    const tagComponents: JSX.Element[] = [];\n\n    todoItem.tags.forEach((tag: string) => {\n      tagComponents.push(\n        <WrapItem>\n          <Tag\n            key={tag}\n            value={tag}\n            isRemovable={false}\n            colorScheme={\n              // if the tag is being used as a filter, set it to orange.\n              // otherwise, if the todo item is complete, set it to the COMPLETED_COLOR.\n              // otherwise, the color scheme is determined by the Tag component itself.\n              filterTags.has(tag)\n                ? \"orange\"\n                : isComplete\n                ? COMPLETED_COLOR\n                : undefined\n            }\n            onClick={() => toggleFilterTag(tag)}\n          />\n        </WrapItem>\n      );\n    });\n\n    return <Wrap mt={1.5}>{tagComponents}</Wrap>;\n  };\n\n  const renderTodoItems = () => {\n    return getSortedTodoItems()\n      .filter((todoItem) => {\n        let shouldRender = true;\n        filterTags.forEach(\n          (tag) => (shouldRender = shouldRender && todoItem.tags.has(tag))\n        );\n\n        return shouldRender;\n      })\n      .map((todoItem) => {\n        const isComplete = itemCompletions[todoItem.id];\n\n        return (\n          <Box\n            w=\"100%\"\n            key={todoItem.id}\n            color={isComplete ? COMPLETED_COLOR : \"inherit\"}\n            border=\"1px\"\n            borderColor=\"gray.200\"\n            borderRadius=\"5px\"\n          >\n            <Checkbox\n              m={5}\n              isChecked={isComplete}\n              onChange={() =>\n                setItemCompletions({\n                  ...itemCompletions,\n                  [todoItem.id]: !isComplete,\n                })\n              }\n            >\n              <Box>\n                <Text>Title: {todoItem.title}</Text>\n                <Text>Due Date: {todoItem.dueDate.toDateString()}</Text>\n\n                {renderTags(todoItem, isComplete)}\n              </Box>\n            </Checkbox>\n          </Box>\n        );\n      });\n  };\n\n  const renderSortOptions = () => {\n    return (\n      <VStack spacing={5}>\n        <HStack spacing={5}>\n          <Checkbox\n            isChecked={sortByDate}\n            onChange={() => setSortByDate(!sortByDate)}\n          >\n            Sort by Date\n          </Checkbox>\n\n          <Checkbox\n            isChecked={sortByCompleted}\n            onChange={() => setSortByCompleted(!sortByCompleted)}\n          >\n            Sort by Completion\n          </Checkbox>\n        </HStack>\n\n        <Text>Click on tags to filter.</Text>\n      </VStack>\n    );\n  };\n\n  return (\n    <VStack\n      spacing={10}\n      p={25}\n      border=\"1px\"\n      borderColor=\"gray.200\"\n      borderRadius=\"5px\"\n      minW={400}\n      maxW={600}\n    >\n      <TodoItemForm onSubmit={addTodoItem}></TodoItemForm>\n\n      {renderSortOptions()}\n\n      <VStack w=\"100%\" spacing={2.5}>\n        {renderTodoItems()}\n      </VStack>\n    </VStack>\n  );\n}\n","import TodoList from \"./components/TodoList\";\nimport { Center, ChakraProvider } from \"@chakra-ui/react\";\n\nfunction App() {\n  return (\n    <ChakraProvider>\n      <Center>\n        <TodoList />\n      </Center>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}